name: yuejuan-windows

on:
  workflow_dispatch: {}

env:
  APP_NAME: Yuejuan
  APP_QUALITY: stable
  ASSETS_REPOSITORY: https://github.com/qinglion/yuejuan-binaries
  VERSIONS_REPOSITORY: https://github.com/qinglion/yuejuan-versions

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        vscode_arch:
          - x64
          # - arm64
    runs-on: windows-2022
    env:
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      npm_config_node_sqlite3_binary_host_mirror: https://registry.npmmirror.com/-/binary/sqlite3/
    steps:
      - name: Checkout builder
        uses: actions/checkout@v4

      - name: Setup Node.js 14 (fermium)
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build and collect assets
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          OS_NAME: windows
        run: |
          bash build.sh

      - name: Prepare files for signing
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force signing_temp | Out-Null
          New-Item -ItemType Directory -Force signing_output | Out-Null
          New-Item -ItemType Directory -Force signing_meta | Out-Null
          $mappingPath = "signing_meta\_mapping.txt"
          if (Test-Path $mappingPath) { Remove-Item $mappingPath -Force }
          $usedNames = @{}
          Get-ChildItem -Path assets -File -Include *.exe, *.msi -Recurse | ForEach-Object {
            $origName = $_.Name
            $chars = $origName.ToCharArray() | ForEach-Object {
              if ([int][char]$_ -le 127) { $_ } else { '_' }
            }
            $asciiName = -join $chars
            if ($asciiName -eq '') { $asciiName = 'file' }
            $base = [System.IO.Path]::GetFileNameWithoutExtension($asciiName)
            $ext = [System.IO.Path]::GetExtension($asciiName)
            if ($usedNames.ContainsKey($asciiName)) {
              $idx = ++$usedNames[$asciiName]
              $asciiName = "$base-$idx$ext"
            } else {
              $usedNames[$asciiName] = 0
            }
            Copy-Item -LiteralPath $_.FullName -Destination ("signing_temp\" + $asciiName) -Force
            "$asciiName|$origName" | Out-File -FilePath $mappingPath -Append -Encoding UTF8
          }

      - name: Code Signing with SSL.com
        uses: sslcom/esigner-codesign@develop
        with:
          command: batch_sign
          username: ${{ secrets.ES_USERNAME }}
          password: ${{ secrets.ES_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          dir_path: ${{ github.workspace }}/signing_temp
          output_path: ${{ github.workspace }}/signing_output
          override: true
          malware_block: true
          environment_name: PROD
          clean_logs: true
          jvm_max_memory: 1024M
          signing_method: v1

      - name: Copy signed files back
        shell: pwsh
        run: |
          $mappingPath = "signing_meta\_mapping.txt"
          if (-not (Test-Path $mappingPath)) { throw "Mapping file not found: $mappingPath" }
          Get-Content $mappingPath | ForEach-Object {
            if ($_ -match '^\s*$') { return }
            $parts = $_ -split '\|', 2
            $asciiName = $parts[0]
            $origName = $parts[1]
            $signedPath = Join-Path "signing_output" $asciiName
            if (Test-Path $signedPath) {
              Move-Item -LiteralPath $signedPath -Destination (Join-Path "assets" $origName) -Force
            } else {
              Write-Warning "Signed file missing: $asciiName"
            }
          }
          Remove-Item -Recurse -Force signing_output, signing_temp, signing_meta

      - name: Prepare checksums
        shell: bash
        run: bash prepare_checksums.sh

      - name: Upload to OSS
        shell: bash
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_BUCKET_NAME: ${{ secrets.OSS_BUCKET_NAME }}
          OSS_ENDPOINT: ${{ secrets.OSS_ENDPOINT }}
          OSS_REGION: ${{ secrets.OSS_REGION }}
          PUBLIC_DOWNLOAD_DOMAIN: ${{ secrets.PUBLIC_DOWNLOAD_DOMAIN }}
          VSCODE_PLATFORM: win32
        run: bash upload_to_oss.sh
        # Required step; script fails if missing creds

      - name: Update versions repo
        shell: bash
        env:
          SHOULD_BUILD: 'yes'
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          PUBLIC_DOWNLOAD_DOMAIN: ${{ secrets.PUBLIC_DOWNLOAD_DOMAIN }}
          VSCODE_PLATFORM: win32
        run: bash release.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yuejuan-windows-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 7


